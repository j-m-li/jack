
// https://www.youtube.com/watch?v=FnGCDLhaxKU

class Acanonical {
field string _data;
field int _datal;
field string _head;
field int _headl;
field string _mid;
field string _str;
field Aclass clas;
field Aclass out;
field string class_name;
field Amember cur_memb;
field buffer _proc;
field buffer _stk;
field buffer _expr_stk;
field Atoken token1;
field Atoken token2;
field int pass;
field buffer _virtuals;
field int class_id;
field int string_id;
field int label_id;

constructor Acanonical new()
{
	_proc := buffer.new(100);
	_stk := buffer.new(100);
	_expr_stk := buffer.new(100);
	_data := string.new(10000);
	_head := string.new(10000);
	_mid := string.new(10000);
	_str := string.new(10000);
	_virtuals := buffer.new(1000);
	token1 := null;
	token2 := null;
	class_id := 10;
	string_id := 0;
	label_id := 0;
	return this;
}

virtual void dispose()
{
	_proc.dispose();
	_stk.dispose();
	_data.dispose();
	_head.dispose();
	_mid.dispose();
	_str.dispose();
	_virtuals.dispose();
	_expr_stk.dispose();
	std.free(this);
	return;
}

method int emmit(in Aparser par)
{
	clas := par.get_next();
	while (clas != null) {
		gen_class();
		clas := clas.get_next();
	}
	return 1;
}

method string get_head()
{
	return _head;
}

method string get_data()
{
	return _data;
}

method string get_mid()
{
	var int l;
	l := _mid.length();
	l := _mid.add_at(l,"static void std__init_strings()\n{\n");
	l := _mid.add_at(l,_str);
	_str.dispose();
	_str := string.new(1);
	l := _mid.add_at(l,"}\n");
	return _mid;
}


method void add_to_data(in string s)
{
	_datal := _data.add_at(_datal, s);
	return;
}

method void gen_class()
{
        var Atoken to;
	var string s;
	var buffer mem;
	var int i;
	var int l;
	var Amember m;

       	to := clas.get_name();
       	class_name := to.get_data();
	_datal := _data.length();	
	add_to_data("// class ");
       	add_to_data(class_name);
	add_to_data("\n");

	s := string.new(4);
	s.set_int(clas.get_nb_fields());
	_headl := _head.length();
       	_headl := _head.add_at(_headl, "#define ");
       	_headl := _head.add_at(_headl, class_name);
       	_headl := _head.add_at(_headl, "___DsizeD ");
	_headl := _head.add_at(_headl, s);
       	_headl := _head.add_at(_headl, "\n");

	class_id := class_id + 1;
	s.set_int(class_id);
       	_headl := _head.add_at(_headl, "#define ");
       	_headl := _head.add_at(_headl, class_name);
       	_headl := _head.add_at(_headl, "___DcidD ");
	_headl := _head.add_at(_headl, s);
       	_headl := _head.add_at(_headl, "\n");
	
	s.dispose();

	pass := 0;
	while (pass < 3) {
		mem := clas.get_members();
		l := mem.length();
		i := 0;
		while (i < l) {
			m := mem.get_at(i);	
			gen_member(m);
			if (pass == 2) {
				m.dispose_body();
			}
			i := i + 1;
		}
		pass := pass + 1;
	}
	return;
}

method void gen_member(in Amember mb)
{
	var int k;
	var string str;
	str := string.new(8);
	k := mb.get_kind();
	if (pass == 0) {
		pass_0(str, mb, k);
		pass_1(str, mb, k);
		pass_2(str, mb, k);
	} else if (pass == 1) {
		pass_3(str, mb, k);
	} else if (pass == 2) {
		pass_4(str, mb, k);
	}
	str.dispose();
        return;
}

method void gen_conditional_call(in Avirtual v, in Amember mb)
{
	var Amember param;
	var buffer params;
	var int i;
	var int l;
	var Atoken tok;

	_datal := _data.length();	
	add_to_data("\tcase ");
	add_to_data(v.get_class_name());
	add_to_data("___DcidD:\n\t\treturn ");
	params := mb.get_params();
	add_to_data(v.get_class_name());
	add_to_data("___V_");
	add_to_data(mb.get_name_string());
	add_to_data("(__this");
	if (params != null) {
		l := params.length();
		i := 0;
		while (i < l) {
			param := params.get_at(i);
			add_to_data(", ");
			tok := param.get_name();
			add_to_data(tok.get_data());
			i := i + 1;
		}
	}
	add_to_data(");\n");
	return;
}

method void gen_virtuals()
{
	var int i;
	var Avirtual v;
	var Amember mb;
	i := _virtuals.length();
	_datal := _data.length();	
	while (i > 0) {
		i := i - 1;
		v := _virtuals.get_at(i);
		mb := v.get_member();
		gen_method_decl(_head, "virtual", mb.get_name_string(), 
			mb, Aclass.$Cvirtual);
		_headl := _head.length();
		_headl := _head.add_at(_headl, ";\n");
		gen_method_decl(_data, "virtual", mb.get_name_string(), 
			mb, Aclass.$Cvirtual);
		_datal := _data.length();	
		add_to_data("\n{\n\tvar cid;\n");
		add_to_data("\tcid = ((var*)__this)[-1];\n");
		add_to_data("\tswitch (cid) {\n");
		while (v != null) {
			gen_conditional_call(v, mb);
			v := v.get_next();
		}
		add_to_data("\tdefault:\n\t\tstd__panic();\n\t}\n");
		add_to_data("\treturn 0;\n}\n");
	}
	return;
}

method void pass_0(io string str, in Amember mb, in int k)
{
	var Atoken t;
	var int ty;
	var int i;

	_datal := _data.length();	
	_headl := _head.length();
	if (k == Aclass.$Cconst) {
		_headl := _head.add_at(_headl, "#define ");
       		_headl := _head.add_at(_headl, class_name);
		_headl := _head.add_at(_headl, "__");
        	_headl := _head.add_at(_headl, mb.get_name_string());
		_headl := _head.add_at(_headl, " ");
		t := mb.get_initial_value();
		ty := t.get_type();
		if (ty == Alexer.$Cstring) {
			_headl := _head.add_at(_headl, "(var)(__string_");
	  		_headl := _head.add_at(_headl, class_name);
        		_headl := _head.add_at(_headl, mb.get_name_string());
			_headl := _head.add_at(_headl, "+2)");
			gen_string(mb.get_name_string(), t.get_data());
		} else if (ty == Alexer.$Cquote) {
			_headl := _head.add_at(_headl, "'");
			_headl := _head.add_at(_headl, t.get_data());
			_headl := _head.add_at(_headl, "'");
		} else {
			_headl := _head.add_at(_headl, t.get_data());
		}
		_headl := _head.add_at(_headl, "\n");
	}
	if (k == Aclass.$Cfield) {
		i := mb.get_index();
		if (i == 0) {
			add_to_data("struct ");
			add_to_data(class_name);
			add_to_data(" {\n");
		}	
		add_to_data("\tvar ");
        	add_to_data(mb.get_name_string());
		add_to_data(";\n");
		if ((i + 1) == clas.get_nb_fields()) {
			add_to_data("};\n");
		}
/*
		str.set_int(i);
		add_to_data("#define _");
		add_to_data(class_name);
		add_to_data("_");
        	add_to_data(mb.get_name_string());
		add_to_data(" ((var*)__this)[");
		add_to_data(str);
		add_to_data("]\n");
*/
	}
	return;
}

method void pass_1(io string str, in Amember mb, in int k)
{
	_datal := _data.length();	
	if (k == Aclass.$Cstatic) {
		add_to_data("static var ");
       		add_to_data(class_name);
		add_to_data("__");
        	add_to_data(mb.get_name_string());
		add_to_data(" = 0;\n");
	}
	return;
}

method void pass_2(io string str, in Amember mb, in int k)
{	
	return;
}

method void pad(in int depth)
{
	_datal := _data.length();	
	while (depth > 0) {
		add_to_data("\t");
		depth := depth - 1;
	}
	return;
}

method Amember find_param(in string stri)
{
	var Amember v;
	var int i;
	var buffer vars;
	var Atoken tok;
	var string s;

	vars := cur_memb.get_params();
	i := 0;
	if (vars != null) {
		i := vars.length();
	}
	while (i > 0) {
		i := i - 1;
		v := vars.get_at(i);
		if (v != null) {
			tok := v.get_name();
			s := tok.get_data();
			if (s != null) {
				if (stri.compare(s) == 0) {
					return v;
				}
			}
		}
	}
	return null;
}

method Amember find_member(in string stri)
{
	var Amember v;
	var int i;
	var buffer vars;
	var Atoken tok;
	var string s; 

	i := 0;
	vars := clas.get_members();
	if (vars != null) {
		i := vars.length();
	}
	while (i > 0) {
		i := i - 1;
		v := vars.get_at(i);
		if (v != null) {
			tok := v.get_name();
			s := tok.get_data();
			if ((s != null)) {
				if (stri.compare(s) == 0) {
					return v;
				}
			}
		}
	}
	return null;
}

method Amember find_field(in string stri)
{
	var Amember v;
	v := find_member(stri);
	if ((v != null) && (v.get_kind() == Aclass.$Cfield)) {
		return v;
	}
	return null;
}

method Amember find_static(in string stri)
{
	var Amember v;
	v := find_member(stri);
	if ((v != null) && (v.get_kind() == Aclass.$Cstatic)) {
		return v;
	}
	return null;
}


method Amember find_meth_virt(in string stri)
{
	var Amember v;
	v := find_member(stri);
	if (v != null) {
		if ((v.get_kind() == Aclass.$Cmethod) ||
			(v.get_kind() == Aclass.$Cvirtual))
		{
			return v;
		}
	}
	return null;
}


method Amember find_local(in string stri)
{
	var Amember v;
	var int i;
	var buffer vars;
	var Atoken tok;
	var string s;

	vars := cur_memb.get_vars();
	i := 0;
	if (vars != null) {
		i := vars.length();
	}
	while (i > 0) {
		i := i - 1;
		v := vars.get_at(i);
		if (v != null) {
			tok := v.get_name();
			s := tok.get_data();
			if ((s != null)) {
				if (stri.compare(s) == 0) {
					return v;
				}
			}
		}
	}
	return null;
}

method void expr_gen_call(in Aexpr expr)
{
	var Aexpr ex1;
	var Aexpr ex2;
	var Atoken tok;
	var string stri;
	var Amember v;
	var string obj;
	var int fld;
	var string s;

	ex2 := _expr_stk.pop();
	ex1 := _expr_stk.pop();
// FIXME
	stri := ex1.data_to_string(new_string(8));
	obj := ex1.get_value2();

	expr.clear_data();
	// class member 
	if (obj == null) {
		v := find_meth_virt(stri);
		if ((v != null)) {
			expr.add_data(class_name);
			expr.add_data("__");
			expr.add_data(stri);
			s := ex2.get_value();
			if (s != null && s.length() > 0) {
				expr.add_data("(__this, ");
				expr.merge_data(ex2.get_data());
				expr.add_data(")");
			} else {
				expr.add_data("(__this)");
			}
			_expr_stk.push(expr);
			return;
		}
		error(expr.get_origin(), "cannot find method.");
		return;
	}

	fld := 0;
	v := find_local(obj);
	if (v == null) {
		v := find_param(obj);
	}
	if (v == null) {
		v := find_field(obj);
		if (v != null) {
			fld := 1;
		}
	}
	if (v != null) {
		tok := v.get_type_id();
		if (tok == null) {
			console.log(obj);
			console.log(v.get_name_string());
			error(ex1.get_origin(), "wrong type of method.");
			return;
		}
		expr.add_data(tok.get_data());
		expr.add_data("__");
		expr.merge_data(ex1.get_data());
		s := ex2.get_value();
		expr.add_data("(");
		if (fld != 0) {
			expr.add_data("_this->");
		}
		expr.add_data(ex1.get_value2());
		if (s != null && s.length() > 0) {
			expr.add_data(",");
			expr.merge_data(ex2.get_data());
		}
		expr.add_data(")");
		_expr_stk.push(expr);
		return;
	}
	expr.add_data(obj);
	expr.add_data("__");
	expr.merge_data(ex1.get_data());
	expr.add_data("(");
	expr.merge_data(ex2.get_data());
	expr.add_data(")");
	_expr_stk.push(expr);
	return;
}

method void expr_gen_sub_expr(in Aexpr expr)
{
	if (expr.get_right() == null) {
		expr.clear_data();
		expr.add_data("");
		_expr_stk.push(expr);
	}
	return;
}

method void expr_gen_comma(in Aexpr expr)
{
	var Aexpr ex1;
	var Aexpr ex2;
	ex2 := _expr_stk.pop();
	ex1 := _expr_stk.pop();
	expr.clear_data();
	expr.merge_data(ex1.get_data());
	expr.add_data(",");
	expr.merge_data(ex2.get_data());
	_expr_stk.push(expr);
	return;
}

method void expr_gen_index(in Aexpr expr)
{
	var Aexpr ex1;
	var Aexpr ex2;
	ex2 := _expr_stk.pop();
	ex1 := _expr_stk.pop();
	expr.clear_data();
	expr.add_data("((var*)");
	expr.merge_data(ex1.get_data());
	expr.add_data(")[");
	expr.merge_data(ex2.get_data());
	expr.add_data("]");
	_expr_stk.push(expr);
	return;
}

method void expr_gen_par(in Aexpr expr)
{
	var Aexpr ex1;
	ex1 := _expr_stk.pop();
	expr.clear_data();
	expr.add_data("(");
	expr.merge_data(ex1.get_data());
	expr.add_data(")");
	_expr_stk.push(expr);
	return;
}

method void expr_gen_constant(in Aexpr expr)
{
	var Aexpr ex1;
	var Aexpr ex2;
	expr.clear_data();
	ex2 := _expr_stk.pop();
	ex1 := _expr_stk.pop();
	expr.merge_data(ex1.get_data());
	expr.add_data("__");
	expr.merge_data(ex2.get_data());
	_expr_stk.push(expr);
	return;
}

method void expr_gen_dot(in Aexpr expr)
{
	var Aexpr ex1;
	var Aexpr ex2;
	expr.clear_data();
	ex2 := _expr_stk.pop();
	ex1 := _expr_stk.pop();
	expr.set_value2(ex1.data_to_string(new_string(8)));
	expr.merge_data(ex2.get_data());
	_expr_stk.push(expr);
	return;
}

method void gen_string(in string s2, in string value)
{
	var int l;

	l := _mid.length();
	l := _mid.add_at(l, "static char __strings_");
	l := _mid.add_at(l,class_name);
	l := _mid.add_at(l,s2);
	l := _mid.add_at(l,"[]=");
	l := _mid.add_at(l,"\"");
	l := _mid.add_at(l,value);
	l := _mid.add_at(l,"\"");
	l := _mid.add_at(l,";\n");

	l := _mid.add_at(l,"static var __string_");
	l := _mid.add_at(l,class_name);
	l := _mid.add_at(l,s2);
	l := _mid.add_at(l,"[]={0,0, ");
//	l := _mid.add_at(l,"(var) __strings_");
//	l := _mid.add_at(l,class_name);
//	l := _mid.add_at(l,s2);
	l := _mid.add_at(l,"0,-1};\n");

	_str.add("\t__string_");
	_str.add(class_name);
	_str.add(s2);
	_str.add("[2]=");
	_str.add("(var) __strings_");
	_str.add(class_name);
	_str.add(s2);
	_str.add(";\n");


	return;
}

method string number(in int n)
{
	var string s2;
	s2 := string.new(8);
	s2.set_int(n);
	return s2; // FIXME keep tracking
}

method string new_string(in int l)
{
	var string s2;
	s2 := string.new(l);
	return s2; // FIXME keep tracking
}

method void expr_gen_str_const(in Aexpr expr)
{
	
	string_id := string_id + 1;
	gen_string(number(string_id), expr.data_to_string(new_string(20))); 
	expr.clear_data();
	expr.add_data("(var)(__string_");
	expr.add_data(class_name);
	expr.add_data(number(string_id));
	expr.add_data("+ 2)");
	_expr_stk.push(expr);
	return;
}

method void expr_gen_char_const(in Aexpr expr)
{
	var string s;
	s := expr.data_to_string(new_string(3));
	expr.clear_data();
	expr.add_data("'");
	if (s.length() > 0) {
		expr.add_data(s);
	} else {
		expr.add_data("\\0");
	}
	expr.add_data("'");
	_expr_stk.push(expr);
	return;
}


method void expr_gen0(in Aexpr expr, in string op)
{
	expr.clear_data();
	expr.add_data(op);
	_expr_stk.push(expr);
	return;
}

method void expr_gen1(in Aexpr expr, in string op)
{
	var Aexpr ex1;
	expr.clear_data();
	ex1 := _expr_stk.pop();
	expr.add_data(op);
	expr.add_data("(");
	expr.merge_data(ex1.get_data());
	expr.add_data(")");
	_expr_stk.push(expr);
	return;
}

method void expr_gen_assign(in Aexpr expr, in string op)
{
	var Aexpr ex1;
	var Aexpr ex2;
	expr.clear_data();
	ex2 := _expr_stk.pop();
	ex1 := _expr_stk.pop();
	expr.merge_data(ex1.get_data());
	expr.add_data(op);
	expr.merge_data(ex2.get_data());
	_expr_stk.push(expr);
	return;
}

method void expr_gen2(in Aexpr expr, in string op)
{
	var Aexpr ex1;
	var Aexpr ex2;
	var int oper;
	expr.clear_data();
	ex2 := _expr_stk.pop();
	ex1 := _expr_stk.pop();
	oper := ex1.get_op();
	if (oper > Aclass.$Croot) {
		expr.add_data("(");
	}
	expr.merge_data(ex1.get_data());
	if (oper > Aclass.$Croot) {
		expr.add_data(")");
	}
	expr.add_data(op);
	oper := ex2.get_op();
	if (oper > Aclass.$Croot) {
		expr.add_data("(");
	}
	expr.merge_data(ex2.get_data());
	if (oper > Aclass.$Croot) {
		expr.add_data(")");
	}
	_expr_stk.push(expr);
	return;
}

method void expr_gen_var(in Aexpr expr)
{
	var string stri;
	var Amember v;
	var Aexpr ex;

	stri := expr.data_to_string(new_string(8));
	expr.clear_data();
	if (stri == null) {
		_expr_stk.push(expr);
		return;
	}
	// local variable : no translation
	v := find_local(stri);
	if (v != null) {
		expr.add_data(stri);
		_expr_stk.push(expr);
		return;
	}

	// parameters : no translation
	v := find_param(stri);
	if (v != null) {
		expr.add_data(stri);
		_expr_stk.push(expr);
		return;
	}

	// class field 
	ex := expr.get_parent();
	v := null;
	if (ex.get_op() != Aclass.$Cdot) {
		v := find_member(stri);
	}
	if ((v != null) && (v.get_kind() == Aclass.$Cfield)) {
		expr.add_data("_this->");
		expr.add_data(stri);
		_expr_stk.push(expr);
		return;
	}

	// static data
	v := find_static(stri);
	if (v != null) {
		expr.add_data(class_name);
		expr.add_data("__");
		expr.add_data(stri);
		_expr_stk.push(expr);
		return;
	}

	// other : no translation
	expr.add_data(stri);
	_expr_stk.push(expr);
	return;
}

method void expr_process(in Aexpr expr)
{
	var int op;
	var Aexpr ex;

	op := expr.get_op();
	if (op < Aclass.$Croot) {
		if (op == Aclass.$Cnull) {
			expr_gen0(expr, "0");
		} else if (op == Aclass.$Cchar_const) {
			expr_gen_char_const(expr); 
		} else if (op == Aclass.$Cint_const) {
			_expr_stk.push(expr);
		} else if (op == Aclass.$Cstr_const) {
			expr_gen_str_const(expr);
		} else if (op == Aclass.$Cthis) {
			expr_gen0(expr, "__this");
		} else {
			expr_gen_var(expr);
		}
		return;
	}
	if (op == Aclass.$Croot) {
		if (_expr_stk.length() != 1) {
			error(expr.get_origin(), "wrong expression...");
			return;
		}
		ex := _expr_stk.pop();
		ex.data_to_string(_data);
		_datal := _data.length();	
	} else if (op == Aclass.$Cassign) {
		expr_gen_assign(expr, "=");
	} else if (op == Aclass.$Cequal) {
		expr_gen2(expr, "==");
	} else if (op == Aclass.$Cnotequal) {
		expr_gen2(expr, "!=");
	} else if (op == Aclass.$Clargerequal) {
		expr_gen2(expr, ">=");
	} else if (op == Aclass.$Clesserequal) {
		expr_gen2(expr, "<=");
 	} else if (op == Aclass.$Clarger) {
		expr_gen2(expr, ">");
 	} else if (op == Aclass.$Clesser) {
		expr_gen2(expr, "<");
 	} else if (op == Aclass.$Clogicaland) {
		expr_gen2(expr, "&&");
	} else if (op == Aclass.$Clogicalor) {
		expr_gen2(expr, "||");
 	} else if (op == Aclass.$Cadd) {
		expr_gen2(expr, "+");
 	} else if (op == Aclass.$Csub) {
		expr_gen2(expr, "-");
 	} else if (op == Aclass.$Cmult) {
		expr_gen2(expr, "*");
 	} else if (op == Aclass.$Cdiv) {
		expr_gen2(expr, "/");
 	} else if (op == Aclass.$Cmodulo) {
		expr_gen2(expr, "%");
 	} else if (op == Aclass.$Clogicalnot) {
		expr_gen1(expr, "!");
 	} else if (op == Aclass.$Cparenthesis) {
		expr_gen_par(expr);
 	} else if (op == Aclass.$Cunaryplus) {
		expr_gen1(expr, "+");
 	} else if (op == Aclass.$Cunaryminus) {
		expr_gen1(expr, "-");
 	} else if (op == Aclass.$Cdot) {
		expr_gen_dot(expr);
 	} else if (op == Aclass.$Cconstant) {
		expr_gen_constant(expr);
 	} else if (op == Aclass.$Ccall) {
		expr_gen_call(expr);
 	} else if (op == Aclass.$Cindex) {
		expr_gen_index(expr);
 	} else if (op == Aclass.$Ccomma) {
		expr_gen_comma(expr);
 	} else if (op == Aclass.$Cexpr) {
		expr_gen_sub_expr(expr);
	} else {
		error(expr.get_origin(), "UNKNOW OP\n");
		return;
	}
	return;
}

method void expr_gen(in Aexpr expr)
{
	var Aexpr ex;
	var Aexpr ex1;
	var buffer stack;
	stack := buffer.new(4);
	ex := expr.get_right();
	ex := expr;
	ex.set_flags(0);
	stack.push(ex);
	while (stack.length() > 0) {
		ex := stack.get_last();
		if (ex.get_flags() != 0) {
			ex := stack.pop();
			expr_process(ex);
		} else {
			ex1 := ex;
			ex.set_flags(1);
			ex := ex.get_right();
			if (ex != null) {
				ex.set_flags(0);
				stack.push(ex);
			}
			ex := ex1.get_left();
			if  (ex != null) {
				ex.set_flags(0);
				stack.push(ex);
			}
		}
	}
	stack.dispose();
	return;
}

// TODO
method int is_switch(in buffer body_, in int i, in int l) 
{
	var Astatement stm;
	var int ty;
	var Aexpr ex;
	var Aexpr r;
	var int op;
	//var string vari;

	stm := body_.get_at(i);
	ty := stm.get_type();
	ex := stm.get_expression();
	if (ex == null) {
		return 0;
	}
	add_to_data("// YO KID\n\t");
	ex := ex.get_right();
	op := ex.get_op();
	if (op == Aclass.$Cequal) {
		r := ex.get_left();
		console.log_int(r.get_op());
		console.log_str(" ");
		if (r.get_op() == Aclass.$Cvar) {
			console.log_str(r.get_value());
			//vari := r.get_value();
			r := ex.get_right();
			if (r.get_op() == Aclass.$Cint_const) {

			} else {
				return 0;
			}
		} else if (r.get_op() == Aclass.$Cint_const) {
			console.log_str(r.get_value());
			console.log_str(" ");
			r := ex.get_right();
			console.log_int(r.get_op());
			console.log_str(" ");
			if (r.get_op() == Aclass.$Cvar) {
			//	vari := r.get_value();
				console.log_str(r.get_value());
			} else {
				console.log_int(r.get_op());
			}
		} else {
		}
		console.log("");
	} else if (op == Aclass.$Clogicaland) {
		console.log("||");
	} else {
		return 0;
	}
	while (i < l) {
		stm := body_.get_at(i);
		ty := stm.get_type();
		if (ty == Aclass.$Celse) {
			return 1;
		}
		if (ty != Aclass.$Celseif) {
			return 1;
		}
		ex := stm.get_expression();
		if (ex == null) {
			return 0;
		}
		i := i + 1;
	}
	return 0;
}

method void body_gen_constructor(in Amember mb)
{
	var int i, l;
	var buffer params;
	var Amember p;
	var Atoken tok;

	params := mb.get_params();
	if (params == null) {
		l := 0;
	} else {
		l := params.length();
	}
	_datal := _data.length();	
	add_to_data("{\n\tNEW(");
	add_to_data(class_name);	
	add_to_data(");\n\treturn ");

	add_to_data(class_name);	
	add_to_data("___");
	tok := mb.get_name();
	add_to_data(tok.get_data());
	add_to_data("(__this");
	i := 0;
	while (i < l) {
		p := params.get_at(i);
		tok := p.get_name();
		add_to_data(", ");
		add_to_data(tok.get_data());
		i := i + 1;
	}
	add_to_data(");\n}\n");
	return;
}

method void body_gen(in Amember mb, in int k, in buffer vars_, in buffer body_)
{
	var int l, i;
	var Atoken tok;
	var Amember va;
	var Astatement stm;
	var int ty;
	var buffer stack;
	var int padde;
	var Aexpr ex;
	var buffer buf;

	cur_memb := mb;
	_datal := _data.length();	
	add_to_data("{\n");
	stack := buffer.new(4);
	if (vars_ != null) {
		l := vars_.length();
	} else {
		l := 0;
	}
	i := 0;
	while (i < l) {
		va := vars_.get_at(i);
		//add_to_data("\t");
		//gen_type(va);
		add_to_data("\tvar ");
		tok := va.get_name();
		add_to_data(tok.get_data());
		add_to_data(";\n");
		i := i + 1;
	}

	if ((k == Aclass.$Cvirtual) || (k == Aclass.$Cmethod)
		|| (k == Aclass.$Cconstructor)) 
	{
		add_to_data("\tstruct ");
		add_to_data(class_name);	
		add_to_data(" *_this;\n");
		add_to_data("\t_this = (void*)__this;\n");
		add_to_data("\t(void)_this;\n");
	}

	l := body_.length();
	i := 0;
	padde := 1;
	while (i < l) {
		stm := body_.get_at(i);
		ty := stm.get_type();
		if ((ty != Aclass.$Celseif) && (ty != Aclass.$Celse)) {
			add_to_data("\n");
			pad(padde);
		}
		if ((ty == Aclass.$Cif) || (ty == Aclass.$Celseif)) {
			is_switch(body_, i, l);
			if (ty == Aclass.$Celseif) {
				add_to_data(" else if (");
			} else {
				add_to_data("if (");
			}
			ex := stm.get_expression();
			if (ex != null) {
				expr_gen(ex);
			}	
			add_to_data(") {");
			stack.push(l);
			stack.push(i + 1);
			stack.push(body_);
			buf := stm.get_else();
			if (buf != null) {
				stack.push(buf.length());
				stack.push(0);
				stack.push(buf);
			}

			padde := padde + 1;
			i := -1;
			l := 0;
			body_ := stm.get_statements();
			if (body_ != null) {
				l := body_.length();
			}
		} else if (ty == Aclass.$Celse) {
			add_to_data(" else {");
			padde := padde + 1;
		} else if (ty == Aclass.$Cbreak) {
			add_to_data("break;");
		} else if (ty == Aclass.$Creturn) {
			ex := stm.get_expression();
			if (ex != null) {
				add_to_data("return ");
				expr_gen(ex);
				add_to_data(";");
			} else {
				add_to_data("return 0;");
			}	
		} else if (ty == Aclass.$Cdo) {
			ex := stm.get_expression();
			if (ex != null) {
				expr_gen(ex);
			}	
			add_to_data(";");
		} else if (ty == Aclass.$Clet) {
			ex := stm.get_expression();
			if (ex != null) {
				expr_gen(ex);
			}	
			add_to_data(";");
		} else if (ty == Aclass.$Cwhile) {
			add_to_data("while (");
			ex := stm.get_expression();
			if (ex != null) {
				expr_gen(ex);
			}	
			add_to_data(") {");
			stack.push(l);
			stack.push(i + 1);
			stack.push(body_);
			i := -1;
			l := 0;
			body_ := stm.get_statements();
			if (body_ != null) {
				l := body_.length();
			}
			padde := padde + 1;
		} else {
			add_to_data("ERROR !!");
		}
		i := i + 1;
		if (i >= l) {
			padde := padde - 1;
			add_to_data("\n");
			pad(padde);
			add_to_data("}");
		}
	
		while ((i >= l) && (stack.length() > 0)) {
			body_ := stack.pop();
			i := stack.pop();
			l := stack.pop();
			if (i >= l) {
				padde := padde - 1;
				add_to_data("\n");
				pad(padde);
				add_to_data("}");
			}
		}
	}
	add_to_data("\n");
	stack.dispose();
	return;
}


method void gen_type(in Amember mb)
{
	var int ty; 
	var Atoken tok;
	_datal := _data.length();	
	tok := mb.get_type_id();
	if (tok != null) {
		add_to_data(tok.get_data());
	} else {
		ty := mb.get_type();
		if (ty == Aclass.$Cint) {
			add_to_data("var");
		} else if (ty == Aclass.$Cvoid) {
			add_to_data("void");
		//} else if (ty == Aclass.$Cbytes) {
		//	add_to_data("void*");
		} else {
			error(mb.get_name(), "unknown type");
		}
	}
	return;
}
	
method void add_virtual(in Amember mb)
{
	var string n;
	var Avirtual v;
	var Avirtual nv;
	var int i;
	var string s;

	n := mb.get_name_string();

	nv := Avirtual.new(mb, class_name);
	i := _virtuals.length();
	while (i > 0) {
		i := i - 1;
		v := _virtuals.get_at(i);
		if (v != null) {
			s := v.get_member_name();
			if ((s != null) && (n.compare(s) == 0)) {
				nv.set_next(v.get_next());
				v.set_next(nv);
				return;
			}
		}
	}
	_virtuals.push(nv);
	return;
}

method void gen_virtual_caller(in Amember mb)
{
	var Amember param;
	var buffer params;
	var int i;
	var int l;
	var Atoken tok;
	params := mb.get_params();
	_headl := _head.length();
	_headl := _head.add_at(_headl, "#define ");
	_headl := _head.add_at(_headl, class_name);
	_headl := _head.add_at(_headl, "__");
	_headl := _head.add_at(_headl, mb.get_name_string());
	_headl := _head.add_at(_headl, "(___this");
	if (params != null) {
		l := params.length();
		i := 0;
		while (i < l) {
			param := params.get_at(i);
			_headl := _head.add_at(_headl, ", ");
			tok := param.get_name();
			_headl := _head.add_at(_headl, tok.get_data());
			i := i + 1;
		}
	}
	_headl := _head.add_at(_headl, ") virtual__");
	_headl := _head.add_at(_headl, mb.get_name_string());
	_headl := _head.add_at(_headl, "(___this");
	if (params != null) {
		l := params.length();
		i := 0;
		while (i < l) {
			param := params.get_at(i);
			_headl := _head.add_at(_headl, ", ");
			tok := param.get_name();
			_headl := _head.add_at(_headl, tok.get_data());
			i := i + 1;
		}
	}
	_headl := _head.add_at(_headl, ")\n");
	return;
}

method void gen_method_decl(io string dest, in string c_name, in string name, 
	in Amember mb, in int k)
{
	var Amember param;
	var buffer params;
	var int i;
	var int l;
	var int sub;
	var Atoken tok;

	dest.add("var ");
	dest.add(c_name);
	dest.add("__");
	if (k == Aclass.$Cconstructor) {
		dest.add("_");
	}
       	dest.add(name);
	params := mb.get_params();
	dest.add("(");
	sub := 1;
	if ((k == Aclass.$Cmethod)  || (k == Aclass.$Cvirtual)
		|| (k == Aclass.$Cconstructor)) 
	{
		dest.add("var __this");
		sub := 2;
	}
	if (params != null) {
		l := params.length();
		i := 0;
		while (i < l) {
			param := params.get_at(i);
			if ((i > 0) || (sub == 2)) {
				dest.add(", ");
			}
			dest.add("var ");
			tok := param.get_name();
			dest.add(tok.get_data());
			i := i + 1;
		}
	}
	dest.add(")");
	return;	
}

method void pass_3(io string str, in Amember mb, in int k)
{
	var buffer vars;
	var buffer body;
	var int sub;

	_datal := _data.length();	
	sub := 0;
	if (k == Aclass.$Cconstructor) {
		sub := 1;
	} else if (k == Aclass.$Cfunction) {
		sub := 1;
	} else if (k == Aclass.$Cmethod) {
		sub := 2;
	} else if (k == Aclass.$Cvirtual) {
		sub := 2;
	}
	if (sub != 0) {
		if (k == Aclass.$Cvirtual) {
			add_virtual(mb);
			gen_virtual_caller(mb);
			str.set("_V_");
			str.add(mb.get_name_string());
			gen_method_decl(_head, class_name, str, mb, k);
			_headl := _head.length();
			_headl := _head.add_at(_headl, ";\n");
			gen_method_decl(_data, class_name, str, mb, k);
			_datal := _data.length();	
			add_to_data("\n");
		} else {

			gen_method_decl(_head, class_name, 
				mb.get_name_string(), mb, k);
			_headl := _head.length();
			_headl := _head.add_at(_headl, ";\n");
			if (k == Aclass.$Cconstructor) {
				gen_method_decl(_head, class_name, 
					mb.get_name_string(), mb,
					Aclass.$Cfunction);
				_headl := _head.length();
				_headl := _head.add_at(_headl, ";\n");
			}
			gen_method_decl(_data, class_name, 
				mb.get_name_string(), mb, k);
			_datal := _data.length();	
			add_to_data("\n");
		}
		vars := mb.get_vars();
		body := mb.get_body();
		if (body != null) {
			body_gen(mb, k, vars, body);
			if (k == Aclass.$Cconstructor) {
				gen_method_decl(_data, class_name, 
					mb.get_name_string(), mb, 
					Aclass.$Cfunction);
				_datal := _data.length();	
				add_to_data("\n");
				body_gen_constructor(mb);
			}
		}
	}
	return;
}
	
method void pass_4(in string str, in Amember mb, in int k)
{
	return;
}


method void error(in Atoken t, in string e)
{
	if (t != null) {
		console.log_str(t.get_file());
		console.log_str(": at line (");
		console.log_int(t.get_line());
		console.log_str(") '");
		console.log_str(t.get_data());
		console.log_str("' ");
	}
	console.log(e);
	dump();
	std.exit(-1);
	return;
}
	
method void dump()
{
/*
	var linked c;
	var Atoken to;
	var string s;
	var int l;
	l := _proc.length();

	while (l > 0) {
		l := l - 1;
		c := _proc.get_at(l);
		to := c.get_data1();
		s := to.get_data();
		if (s != null) {
			console.log_int(c.get_flags());
			console.log(s);
		}
	}
*/
	return;
}

} // class
