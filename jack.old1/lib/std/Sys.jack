/*
 *                         jack standard library 
 *
 *                      1 april MMXXI PUBLIC DOMAIN
 *           The author disclaims copyright to this source code.
 *
 *
 */

class Sys {
	static Buffer args_;

	function void init() {
		do Memory.init();
		let args_ = null;
		do Math.init();
		do Output.init();
		do Screen.init();
		do Keyboard.init();
		do Main.main();
		return;
	}

	function void deInit() {
		var Buffer b;
		do Math.deInit();
		do Output.deInit();
		do Screen.deInit();
		do Keyboard.deInit();
		do Memory.deInit();
		if (args_) {
			let b = args_;
			do b.dispose();
			let args_ = null;
		}
		return;
	}
	
	function void halt() {
#c 	exit(0);
#py 	exit(0)
		return;
	}

	function void error(int errorCode) {
		var int zero;
		let zero = 1;
		let zero = zero - 1;
		do Output.printString("Error(");
		do Output.printInt(errorCode);
		do Output.printString(")");
		do Output.println();
		let errorCode = errorCode / zero;
#c 	exit(errorCode);
#py 	exit(errorCode)

		return;
	}

	function void wait(int duration) {
#c #ifdef _WIN32
#c 	Sleep(duration);
#c #else
#c 	usleep(duration * 1000);
#c #endif
#py 	time.sleep(duration / 1000.0)
		return;
	}

	function Buffer args() {
		var Array a;
		var String s;
		var int i;
		var int isq;
		var Buffer b;
		if (args_) {
			return args_;
		}
		let args_ = Buffer.newString(1);
		let i = 0;
#c 	isq = Sys__argc__;
#py 	isq = len(sys.argv)
		while (i < isq) {
#c 		a = (var)Sys__argv__[i];
#py 		a = sys.argv[i]
			let s = String.new(255);
			let s = s.appendFromNative(a);
			let b = args_;
			do b.append(s);
			let i = i + 1;
		}
		return args_;
	}
}

