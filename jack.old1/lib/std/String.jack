/*
 *                         jack standard library 
 *
 *                      1 april MMXXI PUBLIC DOMAIN
 *           The author disclaims copyright to this source code.
 *
 *
 */

class String {
	function String new(int maxLength) {
		var Array str;
		let str = Array.new(maxLength + 1);
		let str[0] = 0;
		return str;
	}

	method void dispose() {
		do Memory.deAlloc(this);
		return;
	}

	method int length() {
		var String s;
		var int l;
		let l = 0;
		let s = this;
		while (s[l]) {
			let l = l + 1;
		}
		return l;
	}

	method char charAt(int a) {
		var String s;
		var char ret;
		let s = this;
		let ret = s[a];
		return ret;
	}

	method void setCharAt(int j, char c) {
		var String s;
		let s = this;
		let s[j] = c;
		return;
	}
	
	method String appendChar(char c) {
		var int l, i;
		var int max;
		var String b, d;
		let d = this;
		let max = Math.abs(d[-1])-1;
		let l = length();
		if (l < (max - 1)) {
			let d[l] = c;
			let d[l + 1] = 0;
			return this;
		}
		let b = String.new((l * 2) + 4);
		let i = 0;
		while (i < l) {
			let b[i] = d[i];
			let i = i + 1;
		}
		let b[l] = c;
		let b[l + 1] = 0;
		do d.dispose();
		return b;
	}

	method void eraseLastChar() {
		var int l;
		var String s;
		let s = this;
		let l = length();
		if (l > 0) {
			let s[l-1] = 0;
		}
		return;
	}
	
	method int intValue() {
		var int v, s, d, i;
		var String o;
		let o = this;
		let v = 0;
		let s = 1;
		let d = o[0];
		let i = 1;
		if (d = 45) {
			let s = -1;
			let d = o[i];
			let i = i + 1;
		}
		while ((d > 47) & (d < 58)) {
			let v = v * 10;
			let v = v + d - 48;
			let d = o[i];
			let i = i + 1;
		} 
		return v * s;
	}
	
	method String setInt(int j) {
		var int n, k;
		var String s, o;
		var boolean p;
		let o = this;
		let p = false;
		let s = this;
		let o[0] = 0;
		if (p < 0) {
			let p = -p; 
			let s = s.appendStr("-");
		}
		let n = 1000000000;
		while (n > 0) {
			let k = j / n;
			if (k > 0) {
				let p = true;
			}
			if (p) {
				let s = s.appendChar((j / n) + 48);
			}
			let j = Math.rem(j, n);
			let n = n / 10;
		}
		if (p = false) {
			let s = s.appendChar(48);
		}
		return s;
	}

	method String appendFromNative(Array native) {
		var int l, i, c;
		var Array n;
		var String s;
		let s = this;
		let n = native;
		let i = 0;
#c #ifdef _WIN32
#c 	l = (var)wcslen((wchar_t*)n);
#c #else
#c 	l = strlen((char*)n);
#c #endif 
#py 	l = len(n)
		while (i < l) {
#c #ifdef _WIN32
#c 		c = (var)((wchar_t*)n)[i];// FIXME UTF16
#c #else
#c 		c = (var)((char*)n)[i]; // FIXME UTF8
#c #endif 
#py 		c = ord(n[i])
			let s = s.appendChar(c);
			let i = i + 1;
		}
		return s;
	}

	function char ord(String s) {
		return s[0];
	}

	function char backSpace() {
		return 8;
	}

	function char doubleQuote() {
		return 34;
	}

	function char newLine() {
		return 10;
	}

	method String copy() {
		var String s;
		var String p;
		var int j, l;
		let p = this;
		let j = 0;
		let l = p.length();
		let s = String.new(l + 1);
		while (j < l) {
			let s = s.appendChar(p.charAt(j));
			let j = j + 1;
		}
		return s;
	}

	method String appendStr(String p) {
		var int j, l;
		var String s;
		let s = this;
		let j = 0;
		let l = p.length();
		while (j < l) {
			let s = s.appendChar(p.charAt(j));
			let j = j + 1;
		}
		return s;
	}


	method int compare(String s) {
		var String p;
		var int j, lp, ls, r;
		let p = this;
		let lp = p.length();
		let ls = s.length();
		let j = 0;
		while ((j < lp) & (j < ls)) {
			let r = p.charAt(j) - s.charAt(j);
			if (r) {
				return r;
			}	
			let j = j + 1;
		}
		return lp - ls;
	}



}
